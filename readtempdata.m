%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/xienliu/Dropbox/2015/2455797185043dat.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/12/09 13:34:31

%% Initialize variables.
filename = '/Users/xienliu/Dropbox/2015/2455797185043dat.txt';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%6s%6s%13s%4s%4s%4s%4s%4s%2s%2s%2s%5s%3s%3s%3s%3s%3s%3s%3s%3s%2s%5s%5s%7s%6s%7s%4s%4s%6s%6s%6s%6s%3s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Remove white space around all cell columns.
dataArray{6} = strtrim(dataArray{6});
dataArray{8} = strtrim(dataArray{8});
dataArray{9} = strtrim(dataArray{9});
dataArray{10} = strtrim(dataArray{10});
dataArray{11} = strtrim(dataArray{11});
dataArray{13} = strtrim(dataArray{13});
dataArray{14} = strtrim(dataArray{14});
dataArray{15} = strtrim(dataArray{15});
dataArray{16} = strtrim(dataArray{16});
dataArray{17} = strtrim(dataArray{17});
dataArray{18} = strtrim(dataArray{18});
dataArray{19} = strtrim(dataArray{19});
dataArray{20} = strtrim(dataArray{20});
dataArray{21} = strtrim(dataArray{21});
dataArray{27} = strtrim(dataArray{27});
dataArray{28} = strtrim(dataArray{28});
dataArray{30} = strtrim(dataArray{30});
dataArray{31} = strtrim(dataArray{31});
dataArray{32} = strtrim(dataArray{32});
dataArray{33} = strtrim(dataArray{33});
dataArray{34} = strtrim(dataArray{34});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,4,5,7,12,22,23,24,25,26,29]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{3} = datetime(dataArray{3}, 'Format', 'yyyyMMddHHmm', 'InputFormat', 'yyyyMMddHHmm');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{3} = cellfun(@(x) x(2:end-1), dataArray{3}, 'UniformOutput', false);
        dates{3} = datetime(dataArray{3}, 'Format', 'yyyyMMddHHmm', 'InputFormat', 'yyyyMMddHHmm');
    catch
        dates{3} = repmat(datetime([NaN NaN NaN]), size(dataArray{3}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{3});
anyInvalidDates = isnan(dates{3}.Hour) - anyBlankDates;
dates = dates(:,3);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,4,5,7,12,22,23,24,25,26,29]);
rawCellColumns = raw(:, [6,8,9,10,11,13,14,15,16,17,18,19,20,21,27,28,30,31,32,33,34]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
USAF1 = cell2mat(rawNumericColumns(:, 1));
WBAN1 = cell2mat(rawNumericColumns(:, 2));
YRMODAHRMN = dates{:, 1};
DIR1 = cell2mat(rawNumericColumns(:, 3));
SPD1 = cell2mat(rawNumericColumns(:, 4));
GUS1 = rawCellColumns(:, 1);
CLG1 = cell2mat(rawNumericColumns(:, 5));
SKC1 = rawCellColumns(:, 2);
L1 = rawCellColumns(:, 3);
M1 = rawCellColumns(:, 4);
H1 = rawCellColumns(:, 5);
VSB1 = cell2mat(rawNumericColumns(:, 6));
MW4 = rawCellColumns(:, 6);
MW5 = rawCellColumns(:, 7);
MW6 = rawCellColumns(:, 8);
MW7 = rawCellColumns(:, 9);
AW4 = rawCellColumns(:, 10);
AW5 = rawCellColumns(:, 11);
AW6 = rawCellColumns(:, 12);
AW7 = rawCellColumns(:, 13);
W1 = rawCellColumns(:, 14);
TEMP = cell2mat(rawNumericColumns(:, 7));
DEWP1 = cell2mat(rawNumericColumns(:, 8));
SLP1 = cell2mat(rawNumericColumns(:, 9));
ALT1 = cell2mat(rawNumericColumns(:, 10));
STP1 = cell2mat(rawNumericColumns(:, 11));
MAX1 = rawCellColumns(:, 15);
MIN1 = rawCellColumns(:, 16);
PCP1 = cell2mat(rawNumericColumns(:, 12));
PCP2 = rawCellColumns(:, 17);
PCP3 = rawCellColumns(:, 18);
PCPXX1 = rawCellColumns(:, 19);
SD1 = rawCellColumns(:, 20);
VarName1 = rawCellColumns(:, 21);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% YRMODAHRMN=datenum(YRMODAHRMN);


%% Clear temporary variables
clearvars filename startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawCellColumns R;
save('tempdata.mat','YRMODAHRMN','SPD1','PCP1','TEMP');